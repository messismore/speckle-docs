(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{515:function(e,t,a){e.exports=a.p+"assets/img/rvt-gh-intro-img.cb242106.png"},516:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-sendingProjectData.90ee04c6.gif"},517:function(e,t,a){e.exports=a.p+"assets/img/rvtGH-sendingBuildingElements.24a2aa0e.gif"},518:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-createLevelTextTag.144539e9.png"},519:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-generateLevelTagsRhino.bf3ea467.png"},520:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-receiveRevitElements.6fc23ff1.png"},521:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-displayMeshValue.ea2672f7.png"},522:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-colorByCategory.c71371d5.png"},523:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-colorElementsByCategoryRhino.17d5bd90.png"},524:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-ColorByLevel.0a8f1900.png"},525:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-colorElementsByLevelRhino.95eed001.png"},526:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-ColorByParameter.e49655a0.png"},527:function(e,t,a){e.exports=a.p+"assets/img/rvtGH-colorElementsByTypeRhino.0732e1a4.png"},528:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-updateParameters.d4f6b49a.png"},529:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-sendParameterUpdater.8e30acad.gif"},530:function(e,t,a){e.exports=a.p+"assets/img/rvtGh-receiveParameterUpdates.6751f23e.gif"},629:function(e,t,a){"use strict";a.r(t);var s=a(44),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"revit-to-grasshopper-and-back"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#revit-to-grasshopper-and-back"}},[e._v("#")]),e._v(" Revit to Grasshopper and back")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("Level:")]),e._v(" advanced")]),e._v(" "),s("p",[s("strong",[e._v("Author:")]),e._v(" Alan")]),e._v(" "),s("p",[s("strong",[e._v("Software used:")]),e._v(" Revit 2021, Grasshopper for Rhino 7")])]),e._v(" "),s("p",[e._v("You can stream "),s("em",[e._v("Revit")]),e._v(" native elements to "),s("em",[e._v("Grasshopper")]),e._v(" using Speckle! In this guide, we will send different types of Revit elements, such as walls, floors, levels, etc. We will also learn how to specify which data will be sent by using "),s("em",[e._v("filters")]),e._v(", extract parameter values, use them to drive our Grasshopper definitions and how to update parameter values back in the Revit model.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(515),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"getting-started"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[e._v("#")]),e._v(" Getting started")]),e._v(" "),s("p",[e._v("Before getting started, check that you have a supported version of Rhino (6 or 7) and Revit (2019-21) and the Speckle 2.0 connectors installed for "),s("strong",[e._v("Grasshopper")]),e._v(" and "),s("strong",[e._v("Revit")]),e._v(". Then download the Revit and Grasshopper files for this tutorial "),s("a",{attrs:{href:"https://drive.google.com/drive/folders/19JNfCRJcPaO4QBo2q0swwjNLZ1nOnMMS?usp=sharing",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("Our Rhino and Grasshopper connectors are independent of each other, unlike in Speckle 1.0. This means you can choose which one is appropriate for you, or install both! üòÅ")])]),e._v(" "),s("h2",{attrs:{id:"sharing-project-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sharing-project-data"}},[e._v("#")]),e._v(" Sharing project data")]),e._v(" "),s("p",[e._v("In many cases, we may want to share some basic project data, such as it's views, existing levels or loaded families. These types of elements are not really selectable in Revit, but we can use one of the "),s("em",[e._v("filters")]),e._v(" to select them.")]),e._v(" "),s("ol",[s("li",[e._v("Create a new stream called "),s("code",[e._v("Interop - Revit/GH v2 - Project Data")]),e._v(".")]),e._v(" "),s("li",[e._v("Select the "),s("code",[e._v("Project Information")]),e._v(" filter")]),e._v(" "),s("li",[e._v("Choose the "),s("strong",[e._v("Project Info")]),e._v(", "),s("strong",[e._v("Levels")]),e._v(" and "),s("strong",[e._v("Families & Types")]),e._v(" options and press "),s("code",[e._v("Set Filter")]),e._v(".\nYou should see the filter selection appear in the "),s("em",[e._v("Stream card")]),e._v(".")]),e._v(" "),s("li",[e._v("Press "),s("code",[e._v("Send")]),e._v(".")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(516),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"sharing-revit-elements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sharing-revit-elements"}},[e._v("#")]),e._v(" Sharing Revit elements")]),e._v(" "),s("p",[e._v("Now that everyone can access the project data, let's create a new stream to send a selection of the buidling elements.")]),e._v(" "),s("p",[e._v("In this case, we'll be sending the "),s("strong",[e._v("Walls")]),e._v(", "),s("strong",[e._v("Floors")]),e._v(" and "),s("strong",[e._v("Structural Framing")]),e._v(", to be later used in Grasshopper.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(517),alt:""}})]),e._v(" "),s("ol",[s("li",[e._v("Create a new stream called "),s("code",[e._v("Interop - Revit/GH v2 - Building")]),e._v(".")]),e._v(" "),s("li",[e._v("Select the "),s("code",[e._v("Category")]),e._v(" filter")]),e._v(" "),s("li",[e._v("Choose the "),s("strong",[e._v("Walls")]),e._v(", "),s("strong",[e._v("Floors")]),e._v(" and "),s("strong",[e._v("Structural Framing")]),e._v(" options and press "),s("code",[e._v("Set Filter")]),e._v(".\nYou should see the filter selection appear in the "),s("em",[e._v("Stream card")]),e._v(".")]),e._v(" "),s("li",[e._v("Press "),s("code",[e._v("Send")]),e._v(".")])]),e._v(" "),s("h2",{attrs:{id:"receiving-revit-elements-in-grasshopper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#receiving-revit-elements-in-grasshopper"}},[e._v("#")]),e._v(" Receiving Revit elements in Grasshopper")]),e._v(" "),s("p",[e._v("Now that we have both our "),s("em",[e._v("Project Data")]),e._v(" and some "),s("em",[e._v("Building Elements")]),e._v(" in the Speckle server. Let's switch to Grasshopper and use those elements to do some simple Grasshopper tasks.")]),e._v(" "),s("h2",{attrs:{id:"displaying-existing-levels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#displaying-existing-levels"}},[e._v("#")]),e._v(" Displaying existing levels")]),e._v(" "),s("p",[e._v("Included in the "),s("em",[e._v("Project Data")]),e._v(" we have the levels available in our building. Lets create some planes at each elevation, and use those to display the name of each floor.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(518),alt:""}})]),e._v(" "),s("ol",[s("li",[s("p",[e._v("Create a "),s("code",[e._v("Receive")]),e._v(" node and a panel with the "),s("code",[e._v("Interop - Revit/GH v2 - Project Data")]),e._v(" "),s("strong",[e._v("stream url")]),e._v(".")])]),e._v(" "),s("li",[s("p",[e._v("Connect the panel to the only input in the "),s("code",[e._v("Receive")]),e._v(" node.")])]),e._v(" "),s("li",[s("p",[e._v("Press the "),s("code",[e._v("Receive")]),e._v(" button inside the node and wait for the process to finish.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Base objects")]),e._v(" "),s("p",[e._v("You'll notice that the data you received is a "),s("code",[e._v("Base")]),e._v(" object. In order to see what's "),s("em",[e._v("inside")]),e._v(" that speckle object, we need to "),s("strong",[e._v("expand it")]),e._v(".")]),e._v(" "),s("p",[e._v("We'll use the 'Expand Speckle Object` node extensively in this guide.")])])]),e._v(" "),s("li",[s("p",[e._v("Create an "),s("code",[e._v("ExpandSpeckleObject")]),e._v(" component and plug the "),s("code",[e._v("Base")]),e._v(" object into it's input.")])]),e._v(" "),s("li",[s("p",[e._v("The node outputs will display the different properties available on that object. There will be a "),s("code",[e._v("@levels")]),e._v(" output.")])]),e._v(" "),s("li",[s("p",[e._v("Create another "),s("code",[e._v("ExpandSpeckleObject")]),e._v(" to the "),s("code",[e._v("@levels")]),e._v(" output.")])]),e._v(" "),s("li",[s("p",[e._v("The node will display the properties available for each level in the building, including its "),s("strong",[e._v("name")]),e._v(" and "),s("strong",[e._v("elevation")]),e._v(".")])]),e._v(" "),s("li",[s("p",[e._v("Create a vector using the "),s("code",[e._v("elevation")]),e._v(" value, and plug that into an "),s("code",[e._v("XY Plane")]),e._v(" node.")])]),e._v(" "),s("li",[s("p",[e._v("Create a "),s("code",[e._v("Text Tag")]),e._v(" and plug our newly created planes and our "),s("code",[e._v("level")]),e._v(" names.")])])]),e._v(" "),s("p",[e._v("If everything went well, you should see on your screen the generated planes and text tags with the level names on each chposition.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(519),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"displaying-revit-elements-in-grasshopper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#displaying-revit-elements-in-grasshopper"}},[e._v("#")]),e._v(" Displaying revit elements in Grasshopper")]),e._v(" "),s("p",[e._v("Let's also receive the Revit elements we sent to the "),s("code",[e._v("Interop - Revit/GH - Building")]),e._v(" stream.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(520),alt:""}})]),e._v(" "),s("ol",[s("li",[s("p",[e._v("Create a "),s("code",[e._v("Receive")]),e._v(" node and a panel with the "),s("code",[e._v("Interop - Revit/GH v2 - Building")]),e._v(" "),s("strong",[e._v("stream url")]),e._v(".")])]),e._v(" "),s("li",[s("p",[e._v("Connect the panel to the only input in the "),s("code",[e._v("Receive")]),e._v(" node.")])]),e._v(" "),s("li",[s("p",[e._v("Press the "),s("code",[e._v("Receive")]),e._v(" button inside the node and wait for the process to finish.")])]),e._v(" "),s("li",[s("p",[e._v("Create an "),s("code",[e._v("ExpandSpeckleObject")]),e._v(" component and plug the "),s("code",[e._v("Base")]),e._v(" object into it's input.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("You'll see that every category we selected on the Revit filter is organized in different outputs:+")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v(" Floors - Structural Framing - Walls\n")])])])])])]),e._v(" "),s("h3",{attrs:{id:"visualizing-revit-elements"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#visualizing-revit-elements"}},[e._v("#")]),e._v(" Visualizing revit elements")]),e._v(" "),s("p",[e._v("Every Revit element will always have a "),s("code",[e._v("displayMesh")]),e._v(" property containing the geometric representation of that object.")]),e._v(" "),s("p",[e._v("In order to access it, we can use the "),s("code",[e._v("Speckle Object Value by Key")]),e._v(" node to just fetch the mesh from the elements we received. The ouptut can then be previewed in the Rhino window.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(521),alt:""}})]),e._v(" "),s("p",[e._v("We can now proceed to extract some parameters from each object and use them to color our elements accordingly.")]),e._v(" "),s("h3",{attrs:{id:"color-by-category"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#color-by-category"}},[e._v("#")]),e._v(" Color by category")]),e._v(" "),s("p",[e._v("Coloring by category is the most straighforward. Using the data tree we generated with our elements:")]),e._v(" "),s("p",[s("img",{attrs:{src:a(522),alt:""}})]),e._v(" "),s("ol",[s("li",[e._v("Extract the "),s("code",[e._v("displayMesh")]),e._v(" value from each element")]),e._v(" "),s("li",[e._v("Generate one color for each of the branches in our "),s("code",[e._v("data tree")])]),e._v(" "),s("li",[e._v("Connect the meshes and colors into a "),s("code",[e._v("Custom Preview")]),e._v(" node.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(523),alt:""}})]),e._v(" "),s("h3",{attrs:{id:"color-by-level"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#color-by-level"}},[e._v("#")]),e._v(" Color by level")]),e._v(" "),s("p",[e._v("Coloring by level requires also extracting the assigned level for each element. We can do it just like we did for the "),s("code",[e._v("displayMesh")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(524),alt:""}})]),e._v(" "),s("ol",[s("li",[e._v("Use a "),s("code",[e._v("Speckle Object Value by Key")]),e._v(" to get the "),s("code",[e._v("displayMesh")]),e._v(" and "),s("code",[e._v("level")]),e._v(" of each object.")]),e._v(" "),s("li",[e._v("Use an "),s("code",[e._v("ExpandSpeckleObject")]),e._v(" node to obtain the "),s("code",[e._v("name")]),e._v(" and "),s("code",[e._v("elevation")]),e._v(" of the floor assigned to each element.")]),e._v(" "),s("li",[e._v("Using some "),s("em",[e._v("grasshopper magic")]),e._v(", create one color per elevation value (we are using a gradient for this).")]),e._v(" "),s("li",[e._v("Connect the meshes and colors into a "),s("code",[e._v("Custom Preview")]),e._v(" node.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(525),alt:""}})]),e._v(" "),s("h3",{attrs:{id:"color-by-parameter-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#color-by-parameter-value"}},[e._v("#")]),e._v(" Color by parameter value")]),e._v(" "),s("p",[e._v("Coloring by parameter requires a little bit more Grasshopper knowledge. As you'd have to handle the parameter list on your own.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(526),alt:""}})]),e._v(" "),s("ol",[s("li",[e._v("Use an "),s("code",[e._v("Expand Speckle Object")]),e._v(" component to retrieve "),s("strong",[e._v("all")]),e._v(" the properties from the elements. We're interested in the "),s("code",[e._v("displayMesh")]),e._v(" and the "),s("code",[e._v("parameters")]),e._v(" list.")]),e._v(" "),s("li",[e._v("Use another "),s("code",[e._v("Expand Speckle Object")]),e._v(" component to retrieve the properties of each parameter.")]),e._v(" "),s("li",[e._v("To simplify our work, create a set out of all the parameter names.")]),e._v(" "),s("li",[e._v("Now you can use that set to select a specific parameter value (in our case the "),s("strong",[e._v("volume")]),e._v(", index 9) and use those values to drive our gradient.")])]),e._v(" "),s("p",[e._v("You should see the colored elements in the Rhino viewport (in the screenshot, green is smaller and red is bigger).")]),e._v(" "),s("p",[s("img",{attrs:{src:a(527),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"updating-revit-parameter-values-from-gh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updating-revit-parameter-values-from-gh"}},[e._v("#")]),e._v(" Updating Revit parameter values from GH")]),e._v(" "),s("p",[e._v("Now, receiving revit elements and playing with their values in Grasshopper is only part of the story. You may eventually need to send some extra information back to the original Revit model (labelling elements, modifying family types or any other parameter change).")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("You can send parameter updates to Revit using the "),s("code",[e._v("ParameterUpdater")]),e._v(" schema. For that, you'll need to:")]),e._v(" "),s("ol",[s("li",[e._v("Create a new "),s("code",[e._v("Create Schema Object")]),e._v(" node, and select from the "),s("em",[e._v("pop-up")]),e._v(" the "),s("code",[e._v("ParameterUpdater")]),e._v(" option.")]),e._v(" "),s("li",[e._v("Repeat the same step, but select the "),s("code",[e._v("Paramter")]),e._v(" option from the "),s("em",[e._v("pop-up")]),e._v(".")])]),e._v(" "),s("p",[e._v("The process is quite simple, you first need to "),s("em",[e._v("create a parameter")]),e._v(" with a "),s("code",[e._v("name")]),e._v(" and a "),s("code",[e._v("value")]),e._v(". Then, in the "),s("code",[e._v("ParameterUpdater")]),e._v(" you specify the "),s("code",[e._v("elementId")]),e._v(" of the element you want to modify, and the parameter object we just created.")]),e._v(" "),s("p",[e._v("In order to be able to update a parameter value, the parameter "),s("em",[s("strong",[e._v("must exist")])]),e._v(" in the element.")])]),e._v(" "),s("h3",{attrs:{id:"sending-update-orders-from-gh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sending-update-orders-from-gh"}},[e._v("#")]),e._v(" Sending update orders from GH")]),e._v(" "),s("p",[e._v("Let's use this to update the "),s("code",[e._v("Mark")]),e._v(" parameter (which exists in all Revit elements) of all walls in our model.")]),e._v(" "),s("p",[e._v("We're just going to name each wall sequentially with the pattern "),s("code",[e._v("WALL1, WALL2...WALLXX")]),e._v(", so each wall will have a unique "),s("code",[e._v("mark")]),e._v(".")]),e._v(" "),s("p",[s("img",{attrs:{src:a(528),alt:""}})]),e._v(" "),s("ol",[s("li",[e._v("Connect the walls to an "),s("code",[e._v("Expand Speckle Object")]),e._v(" node.")]),e._v(" "),s("li",[e._v("Using the "),s("code",[e._v("elementId")]),e._v(" create a list of numbers of the same length and concatenate it with the text "),s("code",[e._v("WALL")]),e._v(".")]),e._v(" "),s("li",[e._v("Connect the list to the "),s("code",[e._v("Parameter")]),e._v(" node, and connect a panel with the text "),s("strong",[e._v("Mark")]),e._v(" to the "),s("code",[e._v("name")])]),e._v(" "),s("li",[e._v("Connect the "),s("code",[e._v("elementId")]),e._v(" and the "),s("code",[e._v("parameter")]),e._v(" list appropriately in the "),s("code",[e._v("ParameterUpdater")]),e._v(" node.")])]),e._v(" "),s("p",[e._v("We will also need a new stream and "),s("code",[e._v("send node")]),e._v(" to send this data to Revit. Create a new stream called "),s("code",[e._v("Interop - Revit/GH v2 - ParamUpdate")]),e._v(" and send the "),s("code",[e._v("ParameterUpdater")]),e._v(" elements.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(529),alt:""}})]),e._v(" "),s("h3",{attrs:{id:"receiving-the-updates-in-revit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#receiving-the-updates-in-revit"}},[e._v("#")]),e._v(" Receiving the updates in Revit")]),e._v(" "),s("p",[e._v("In Revit, add the stream we just created to your project and press "),s("code",[e._v("Receive")]),e._v(". Once the process has completed, you should see the "),s("code",[e._v("Mark")]),e._v(" property has been filled with unique values for each wall. You can repeat this process as many times as necessary.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(530),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"known-issues"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#known-issues"}},[e._v("#")]),e._v(" Known issues")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("Under the "),s("code",[e._v("beta")]),e._v(" release, there is limited support for Solid elements to be sent "),s("em",[e._v("from")]),e._v(" Revit "),s("em",[e._v("to")]),e._v(" Speckle. Any solid that is not supported will be converted to a "),s("code",[e._v("Mesh")]),e._v(" instead.")]),e._v(" "),s("p",[e._v("Speckle 2.0 is currently under "),s("code",[e._v("beta")]),e._v(". You can find any known issues on our "),s("a",{attrs:{href:"https://github.com/specklesystems/speckle-sharp/issues?q=is%3Aissue+is%3Aopen",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub Repo Issues page"),s("OutboundLink")],1),e._v(".")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);