(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{311:function(e,t,a){e.exports=a.p+"assets/img/rvt-schemaBuilder-popup.05a0e125.gif"},486:function(e,t,a){e.exports=a.p+"assets/img/ghrvt-intro.720cca57.gif"},487:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-sendProjectData.0174d413.gif"},488:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-receiveRvtData.292159b1.png"},489:function(e,t,a){e.exports=a.p+"assets/img/InteropGuide-plotData.2c703569.png"},490:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-plot-geometry.75f72684.png"},491:function(e,t,a){e.exports=a.p+"assets/img/gh-Rvt-sendPlotData.802d0700.png"},492:function(e,t,a){e.exports=a.p+"assets/img/gh-Rvt-anim-plot.4fd2bb57.gif"},493:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-plot-revitObjects.367dc235.png"},494:function(e,t,a){e.exports=a.p+"assets/img/gh-Rvt-anim-plotRvt.31a993e0.gif"},495:function(e,t,a){e.exports=a.p+"assets/img/InteropGuide_floors.d6a52b40.png"},496:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-createLevels.1e482f8f.png"},497:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-createFloors.4e6e481f.png"},498:function(e,t,a){e.exports=a.p+"assets/img/InteropGuide-beams.12dbd078.png"},499:function(e,t,a){e.exports=a.p+"assets/img/InteropGuide-walls.c40f96f6.png"},500:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-createRevitWallsByFace.64f0ed0d.png"},501:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-createRevitWalls.64fc2722.png"},502:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-genericObj-directShape.4bb203ee.png"},503:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-structureData.b38e35f4.png"},504:function(e,t,a){e.exports=a.p+"assets/img/gh-Rvt-sendStructureData.31a6e354.png"},505:function(e,t,a){e.exports=a.p+"assets/img/gh-Rvt-anim-structureData.d66c5a3f.gif"},506:function(e,t,a){e.exports=a.p+"assets/img/InteropGuide-panels.c1293242.png"},507:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-creatingAdaptiveComponents.b51fe833.png"},508:function(e,t,a){e.exports=a.p+"assets/img/gh-Rvt-anim-panels.fc45add6.gif"},509:function(e,t,a){e.exports=a.p+"assets/img/ghRvt-swapBranches.9c146ba3.gif"},627:function(e,t,a){"use strict";a.r(t);var s=a(44),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"grasshopper-‚û°-revit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#grasshopper-‚û°-revit"}},[e._v("#")]),e._v(" Grasshopper ‚û° Revit")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("Level:")]),e._v(" intermediate")]),e._v(" "),s("p",[s("strong",[e._v("Author:")]),e._v(" Alan")]),e._v(" "),s("p",[s("strong",[e._v("Software used:")]),e._v(" Revit 2021, Grasshopper for Rhino 7")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("We recently did a major upgrade of this guide. If for whatever reason you were looking for the previous version, you can find it "),s("RouterLink",{attrs:{to:"/user/interop-gh-revit-v1.html"}},[e._v("here")])],1)]),e._v(" "),s("p",[e._v("You can stream "),s("em",[e._v("Grasshopper")]),e._v(" native geometry to Revit using Speckle! In this guide, we will send different types of geometry and built elements to Revit to understand how Speckle converts them into native Revit geometries. We will also create some "),s("code",[e._v("BuiltElements")]),e._v(" using the "),s("code",[e._v("SchemaBuilder")]),e._v(" node, which allows for the generation of native Revit elements such as walls, floors, topography, etc...")]),e._v(" "),s("p",[s("img",{attrs:{src:a(486),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"getting-started"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[e._v("#")]),e._v(" Getting started")]),e._v(" "),s("p",[e._v("Before getting started, check that you have a supported version of Rhino (6 or 7) and Revit (2019-21) and the Speckle 2.0 connectors installed for "),s("strong",[e._v("Grasshopper")]),e._v(" and "),s("strong",[e._v("Revit")]),e._v(". Then download the Rhino and Grasshopper files or this tutorial "),s("a",{attrs:{href:"https://drive.google.com/drive/folders/1bFRqtdL62bHaA1LAfdzll59FBv0givxE?usp=sharing",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),s("OutboundLink")],1)]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("Our Rhino and Grasshopper connectors are independent of each other, unlike in Speckle 1.0. This means you can choose which one is appropriate for you, or install both! üòÅ")])]),e._v(" "),s("p",[e._v("We're also going to assume that you already have access to a Speckle 2.0 server, and you have correctly set up your account for that server in the "),s("em",[e._v("Speckle Manager")]),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"sharing-revit-project-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sharing-revit-project-data"}},[e._v("#")]),e._v(" Sharing Revit project data")]),e._v(" "),s("p",[e._v("Let's start with the easy part: In order to create Revit elements using Speckle, we should ideally have some knowledge of the current information available in our Revit project.")]),e._v(" "),s("p",[e._v("Let's create a new project using the default "),s("code",[e._v("Architectural Template")]),e._v(". You can use your prefered units. A project will be created with 2 default levels ("),s("em",[e._v("level 0")]),e._v(" and "),s("em",[e._v("level 1")]),e._v("). It should also have some default families loaded in the project.")]),e._v(" "),s("p",[e._v("Now, go to the "),s("strong",[e._v("Add-ins")]),e._v(" tab, and press the "),s("code",[e._v("Speckle for Revit")]),e._v(" icon. The Speckle "),s("em",[e._v("Desktop UI")]),e._v(" should appear.")]),e._v(" "),s("ul",[s("li",[e._v("Press the blue "),s("code",[e._v("+")]),e._v(" button on the lower-right corner to add a stream to the file.")]),e._v(" "),s("li",[e._v("Create a new stream by writing a name and clicking on the blue arrow icon. You should see the "),s("code",[e._v("Stream")]),e._v(" card appear on the "),s("em",[e._v("DesktopUI")]),e._v(" window."),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("In our case, we'll call our stream "),s("strong",[e._v("Interop - GH/Revit - Project Data")])])])]),e._v(" "),s("li",[e._v("Press the blue button at the center that reads "),s("code",[e._v("0 object")]),e._v(" and select the option "),s("code",[e._v("Set/Edit Objects Filter")]),e._v(".")]),e._v(" "),s("li",[e._v("Go to the "),s("code",[e._v("Project Info")]),e._v(" filter type, select the "),s("em",[e._v("Project Info")]),e._v(", "),s("em",[e._v("Levels")]),e._v(" and "),s("em",[e._v("Families and Types")]),e._v(" options and press "),s("code",[e._v("Set Filter")]),e._v(".")]),e._v(" "),s("li",[e._v("Press the "),s("code",[e._v("Send")]),e._v(" button in the "),s("em",[e._v("Project Data")]),e._v(" stream.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(487),alt:""}})]),e._v(" "),s("p",[e._v("That's it! We've effectively pushed our project information, including all existing levels and loaded families/types to Speckle. We'll use this information to correctly set family/type names for Revit elements.")]),e._v(" "),s("p",[e._v("This concludes our setup. We'll now switch to Grasshopper to receive it and use it to generate new Revit elements.")]),e._v(" "),s("h2",{attrs:{id:"using-revit-project-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-revit-project-data"}},[e._v("#")]),e._v(" Using Revit project data")]),e._v(" "),s("p",[e._v("Now let's open up our "),s("em",[e._v("fake Leadenhall")]),e._v(" building model in Rhino. You'll need to open both Rhino and Grasshopper files, as there are some grasshopper nodes that reference geometries from the Rhino file.")]),e._v(" "),s("p",[e._v("Go to a blank area of your Grasshopper canvas:")]),e._v(" "),s("ol",[s("li",[e._v("Create a "),s("code",[e._v("Panel")]),e._v(" and a "),s("code",[e._v("Receive")]),e._v(" node.")]),e._v(" "),s("li",[e._v("Paste the "),s("em",[e._v("stream url")]),e._v(" we copied in the previous step into the panel.")]),e._v(" "),s("li",[e._v("Connect the panel to the "),s("code",[e._v("Receive")]),e._v(" node input and press the "),s("em",[e._v("Receive")]),e._v(" button.")]),e._v(" "),s("li",[e._v("Create an "),s("code",[e._v("Expand Speckle Object")]),e._v(" node, and connect the receied data to it.")])]),e._v(" "),s("p",[e._v("Once done, it should look like this:")]),e._v(" "),s("p",[s("img",{attrs:{src:a(488),alt:""}})]),e._v(" "),s("p",[e._v("Most of the outputs will also be "),s("code",[e._v("Base")]),e._v(" objects, meaning you'll have to expand them to inspect their properties (more on this later when using family types).")]),e._v(" "),s("h2",{attrs:{id:"sending-geometry-to-revit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sending-geometry-to-revit"}},[e._v("#")]),e._v(" Sending geometry to Revit")]),e._v(" "),s("p",[s("img",{attrs:{src:a(489),alt:""}})]),e._v(" "),s("p",[e._v("We'll start by sending in the surrounding buildings of our model, as well as the plot street lines and the plot terrain. For this, we'll first create a "),s("code",[e._v("Speckle Object")]),e._v(" to organize our data.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(490),alt:""}})]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("Remember you must correctly specify the "),s("code",[e._v("Access Type")]),e._v(" for each input to generate the right amount of "),s("code",[e._v("Base")]),e._v(" objects.")]),e._v(" "),s("p",[e._v("Inputs set with "),s("code",[e._v("List Access")]),e._v(" will be shown with an "),s("code",[e._v("L")]),e._v(" icon beside them.")])]),e._v(" "),s("p",[e._v("We'll also need to create a new "),s("em",[e._v("stream")]),e._v(" in our server, called "),s("code",[e._v("Interop - GH/Revit - Plot Data")]),e._v(", and copy it's "),s("code",[e._v("url")]),e._v(".")]),e._v(" "),s("p",[e._v("Then, we can just plug in the geometries directly into their respective inputs. Connect it to a "),s("code",[e._v("Send")]),e._v(" node pointing to the stream we just created and press "),s("code",[e._v("Send")]),e._v(".")]),e._v(" "),s("p",[s("img",{attrs:{src:a(491),alt:""}})]),e._v(" "),s("p",[e._v("In Revit, add the stream to your DesktopUI and press "),s("code",[e._v("Receive")]),e._v(". Here's a quick peek of the process:")]),e._v(" "),s("p",[s("img",{attrs:{src:a(492),alt:""}})]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("About sending BREPs")]),e._v(" "),s("p",[e._v("Rhino BREP support still has some limitations we are working on improving, but other's are strictly imposed by the Revit API. In order to ensure unsupported geometric objects still get represented when importing to Revit, we provide a "),s("code",[e._v("fallback")]),e._v(" value for every "),s("code",[e._v("BREP")]),e._v(" in the form of a "),s("code",[e._v("Mesh")]),e._v(".")]),e._v(" "),s("p",[e._v("So, whenever a BREP conversion fails in Revit, the resulting object will still be generated in the model, only as a tesselated representation of the smooth BREP.")])]),e._v(" "),s("h3",{attrs:{id:"controlling-the-directshape-conversion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#controlling-the-directshape-conversion"}},[e._v("#")]),e._v(" Controlling the DirectShape conversion")]),e._v(" "),s("p",[e._v("As you may have noticed, our surrounding buildings have been created in Revit as "),s("code",[e._v("Generic Models")]),e._v(". This is the default conversion behaviour when sending geometry elements that are not directly supported by Revit (such as meshes or breps).")]),e._v(" "),s("p",[e._v("In order to control this behaviour, we can use the "),s("code",[e._v("Schema Builder")]),e._v(" node.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("SchemaBuilder node pop-up")]),e._v(" "),s("p",[e._v("When first create the node, a pop-up window will appear allowing you to select the object type you want to create. These are organized into two main categories:")]),e._v(" "),s("ul",[s("li",[e._v("Built elements: These are Speckle elements created to support common built elements (beam, wall, slab, level...) accross the entire Speckle ecosystem.")]),e._v(" "),s("li",[e._v("Revit elements: These are specifically designed to support Revit specific entities and workflows.\n"),s("img",{attrs:{src:a(311),alt:""}})])])]),e._v(" "),s("ul",[s("li",[e._v("Drag a "),s("code",[e._v("Create Schema Object")]),e._v(" node to your canvas.")]),e._v(" "),s("li",[e._v("From the pop-up, select "),s("code",[e._v("DirectShape")]),e._v(" and press ok. A new node and a dropdown should appear.")]),e._v(" "),s("li",[e._v("Select "),s("code",[e._v("Mass")]),e._v(" from the dropdown list.")]),e._v(" "),s("li",[e._v("Connect the surrounding building geometries to the "),s("code",[e._v("baseGeometries")]),e._v(" input. "),s("em",[e._v("Graft")]),e._v(" the input to generate one direct shape per geometry.")]),e._v(" "),s("li",[e._v("You'll also need to connect a panel with a desired name for each "),s("code",[e._v("DirectShape")]),e._v(".")])]),e._v(" "),s("p",[e._v("Let's also send the "),s("code",[e._v("terrain")]),e._v(" as a native "),s("code",[e._v("RevitTopography")]),e._v(" object.")]),e._v(" "),s("ul",[s("li",[e._v("Drag a "),s("code",[e._v("Create Schema Object")]),e._v(" node to your canvas and select the "),s("code",[e._v("RevitTopography")]),e._v(" type.")]),e._v(" "),s("li",[e._v("Connect the terrain mesh to the revit topography "),s("code",[e._v("displayMesh")]),e._v(" input.")])]),e._v(" "),s("p",[e._v("It should end up looking like this:")]),e._v(" "),s("p",[s("img",{attrs:{src:a(493),alt:""}})]),e._v(" "),s("p",[e._v("Now swap those direct shapes for the original geometries and send them.")]),e._v(" "),s("p",[e._v("In Revit, once you get the notification that data was changed, press the receive button. You should now see the surrounding buildings appear as "),s("code",[e._v("Massing")]),e._v(" objects.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("If you don't see the surrounding buildings, ensure you have the Massing objects visibility active in the "),s("em",[e._v("Massing / Site")]),e._v(" tab in Revit.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(494),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"generating-floors-and-levels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generating-floors-and-levels"}},[e._v("#")]),e._v(" Generating Floors and Levels")]),e._v(" "),s("p",[e._v("Now that we have our plot and surrounding buildings set-up, let's proceed with the creation of the levels and floor slabs for each level.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(495),alt:""}})]),e._v(" "),s("h3",{attrs:{id:"creating-levels"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-levels"}},[e._v("#")]),e._v(" Creating levels")]),e._v(" "),s("ul",[s("li",[e._v("Drag a "),s("code",[e._v("Create Schema Object")]),e._v(" node to your canvas and select the "),s("code",[e._v("RevitLevel")]),e._v(" type.")]),e._v(" "),s("li",[e._v("A revit level requires a "),s("em",[e._v("name")]),e._v(", "),s("em",[e._v("elevation")]),e._v(", and an indication to create a view for that level.")]),e._v(" "),s("li",[e._v("Connect the "),s("code",[e._v("lower floor names")]),e._v(" and "),s("code",[e._v("lower floor heights")]),e._v(" to their respective inputs in the "),s("code",[e._v("RevitLevel")]),e._v(" node.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(496),alt:""}})]),e._v(" "),s("h3",{attrs:{id:"creating-floors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-floors"}},[e._v("#")]),e._v(" Creating floors")]),e._v(" "),s("p",[e._v("Now we'll create some native Revit floors, using the levels we previously created and the curves available on the "),s("code",[e._v("Upper/Lower Floor Outlines")]),e._v(" nodes. We'll also need to select a floor type from one of the "),s("code",[e._v("available floor types")]),e._v(" we received from Revit.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("To select a specific floor type, first select an individual type with a "),s("code",[e._v("list item")]),e._v(" node, and then use the "),s("code",[e._v("Expand Speckle Object")]),e._v(" node to inspect it's properties.")])]),e._v(" "),s("ol",[s("li",[e._v("Create two "),s("code",[e._v("SchemaBuilder")]),e._v(" nodes with "),s("code",[e._v("RevitFloor")]),e._v(" type.")]),e._v(" "),s("li",[e._v("Connect the selected family name and type.")]),e._v(" "),s("li",[e._v("Connect the respective levels and outlines (upper/lower) to each "),s("code",[e._v("RevitFloor")]),e._v(" node.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(497),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"creating-beams"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-beams"}},[e._v("#")]),e._v(" Creating beams")]),e._v(" "),s("p",[s("img",{attrs:{src:a(498),alt:""}})]),e._v(" "),s("p",[e._v("In this case, since we do not have much information about the structural beams, as they are modelled as simple lines. This is the perfect scenario to use Speckle's "),s("code",[e._v("BuiltElements")]),e._v(".")]),e._v(" "),s("p",[e._v("These are simple representations of common BIM elements, that require a minimum amount of input. These elements will be appropriately converted to native elements on each target platform when possible.")]),e._v(" "),s("p",[e._v("In the case of a "),s("code",[e._v("BuiltElements.Beam")]),e._v(", the input required is only the axis line of that beam.")]),e._v(" "),s("ol",[s("li",[e._v("Drag a "),s("code",[e._v("Create Schema Object")]),e._v(" node to your canvas and select the "),s("code",[e._v("Beam")]),e._v(" type (not "),s("code",[e._v("RevitBeam")]),e._v(").")]),e._v(" "),s("li",[e._v("Connect all truss lines to the "),s("code",[e._v("baseLine")]),e._v(" input. Since we don't really care about the data structure they're organized by, we can flatten the input.")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://link",alt:""}})]),e._v(" "),s("h2",{attrs:{id:"creating-the-walls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-the-walls"}},[e._v("#")]),e._v(" Creating the walls")]),e._v(" "),s("p",[s("img",{attrs:{src:a(499),alt:""}})]),e._v(" "),s("h3",{attrs:{id:"core-walls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#core-walls"}},[e._v("#")]),e._v(" Core walls")]),e._v(" "),s("p",[e._v("Just like with floors, we can create walls using the "),s("code",[e._v("Create Schema Object")]),e._v(" node. There are several ways to create a wall, but for the "),s("code",[e._v("Core Walls")]),e._v(", we're going to create them with the "),s("code",[e._v("Wall by Face")]),e._v(" type. This takes a surface as a reference to create a wall in revit with the same shape.")]),e._v(" "),s("ol",[s("li",[e._v("Drag a "),s("code",[e._v("Create Schema Object")]),e._v(" node to your canvas and select the "),s("code",[e._v("Wall by Face")]),e._v(" type.")]),e._v(" "),s("li",[e._v("Locate the node called "),s("code",[e._v("Core Walls")]),e._v(" and connect it to the "),s("code",[e._v("surface")]),e._v(" input.")]),e._v(" "),s("li",[e._v("Select a category from the "),s("em",[e._v("available wall types")]),e._v(" we received from Revit and connect it's family name and type.")]),e._v(" "),s("li",[e._v("The last thing we need is a level, but in this case, we already know there is a level called "),s("code",[e._v("Level 0")]),e._v(" on our project, which is at ground level. We can reference it using the "),s("code",[e._v("Level by name")]),e._v(" schema.")]),e._v(" "),s("li",[e._v("Drag a "),s("code",[e._v("Create Schema Object")]),e._v(" node to your canvas and select the "),s("code",[e._v("Level by name")]),e._v(".")]),e._v(" "),s("li",[e._v('Connect a panel with the text "Level 0" to it\'s only input, and connect the resulting level into the '),s("code",[e._v("Wall by Face")]),e._v(" node.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(500),alt:""}})]),e._v(" "),s("h3",{attrs:{id:"interior-walls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interior-walls"}},[e._v("#")]),e._v(" Interior walls")]),e._v(" "),s("p",[e._v("We have a bunch of interior walls we haven't done anything with yet. Lets create them using a "),s("code",[e._v("line")]),e._v(" and a "),s("code",[e._v("height")]),e._v(".")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("Drag a "),s("code",[e._v("Create Schema Object")]),e._v(" node to your canvas and select the "),s("code",[e._v("Wall by curve and height")]),e._v(" type.")])]),e._v(" "),s("li",[s("p",[e._v("Connect the nodes "),s("code",[e._v("Wall Baseline per level")]),e._v("and "),s("code",[e._v("Wall Height per level")]),e._v(" to the "),s("code",[e._v("baseLine")]),e._v(" and "),s("code",[e._v("height")]),e._v(" input respectively.")])]),e._v(" "),s("li",[s("p",[e._v("Connect the "),s("code",[e._v("filtered levels")]),e._v(" node to the "),s("code",[e._v("level")]),e._v(" input.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("Notice that, since not all levels have walls, the level's have been filtered to contain only the ones that are to be used.")])])]),e._v(" "),s("li",[s("p",[e._v("You can "),s("em",[e._v("flatten")]),e._v(" the output of the node, as we won't be needing that data tree structure anymore.")])])]),e._v(" "),s("p",[s("img",{attrs:{src:a(501),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"categorizing-generic-geometric-objects"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#categorizing-generic-geometric-objects"}},[e._v("#")]),e._v(" Categorizing generic geometric objects")]),e._v(" "),s("p",[e._v("For anything that cannot be directly translated into Revit elements, you can still send them directly, as we saw in the first step. Just as we did with the "),s("em",[e._v("surrounding buildings")]),e._v(", we can categorize the "),s("em",[e._v("Ground Floor Objects")]),e._v(", "),s("em",[e._v("Foundation")]),e._v(" and "),s("em",[e._v("Ramps")]),e._v(" as "),s("code",[e._v("DirectShape")]),e._v(" objects with their appropriate categories.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(502),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"organize-the-building-structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#organize-the-building-structure"}},[e._v("#")]),e._v(" Organize the building structure")]),e._v(" "),s("p",[e._v("Until this moment, we've been creating several Revit elements we want to send. Before doing so, let's organize that data into a single "),s("code",[e._v("Speckle Object")]),e._v(" to keep everything tidy.")]),e._v(" "),s("p",[e._v("We have several parts to send:")]),e._v(" "),s("ul",[s("li",[e._v("Floors")]),e._v(" "),s("li",[e._v("Core walls")]),e._v(" "),s("li",[e._v("Interior walls")]),e._v(" "),s("li",[e._v("Beams")]),e._v(" "),s("li",[e._v("Objects at ground floor")]),e._v(" "),s("li",[e._v("Substructure")]),e._v(" "),s("li",[e._v("Ramps")])]),e._v(" "),s("ol",[s("li",[e._v("Drag a new "),s("code",[e._v("Create Speckle Object")]),e._v(" node.")]),e._v(" "),s("li",[e._v("Create inputs for each of the object types we just created.")]),e._v(" "),s("li",[e._v("Connect everything appropriately.")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("Always remember to set the access type of your inputs appropriately.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(503),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"sending-the-building-structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sending-the-building-structure"}},[e._v("#")]),e._v(" Sending the building structure")]),e._v(" "),s("p",[e._v("On the server's website, create a new stream to send the structure data to. Copy it's "),s("code",[e._v("url")]),e._v(". In Grasshopper, create a "),s("code",[e._v("Send")]),e._v(" node and a panel with the "),s("code",[e._v("url")]),e._v(" of the stream we created earlier to share the structure.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(504),alt:""}})]),e._v(" "),s("p",[e._v("In Revit, add the newly created stream to the DesktopUI and press "),s("code",[e._v("Receive")]),e._v(". You can see the entire process in the animation bellow.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(505),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"create-adaptivefamiliy-instances"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-adaptivefamiliy-instances"}},[e._v("#")]),e._v(" Create AdaptiveFamiliy instances")]),e._v(" "),s("p",[s("img",{attrs:{src:a(506),alt:""}})]),e._v(" "),s("p",[e._v("Adaptative families in Revit are a cool contraption. You can provide a set of points and they will adapt to the given positions.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("In order to correctly create "),s("em",[e._v("Adaptive Family")]),e._v(" instances, the specified family must be loaded into the Revit project.")]),e._v(" "),s("p",[e._v("The amount of points provided must also coincide with the amount of points the "),s("em",[e._v("Adaptive Family")]),e._v(" uses internally.")])]),e._v(" "),s("p",[e._v("You'll find a very simple adaptive component called "),s("code",[e._v("4Pt-AdaptivePanel")]),e._v(" along with the rest of the files of this guide.")]),e._v(" "),s("p",[e._v("In the file, we already created some "),s("em",[e._v("curved square panels")]),e._v(" to act as a fancy roof shading. In the grasshopper file, you'll find a node called "),s("code",[e._v("Point groups for adaptive component")]),e._v(", containing the 4 corners of this panels individually grouped.")]),e._v(" "),s("p",[e._v("Sending "),s("em",[e._v("Adaptive Components")]),e._v(" to Revit using Speckle is quite easy:")]),e._v(" "),s("ul",[s("li",[e._v("Drag a "),s("code",[e._v("Create Schema Object")]),e._v(" node to your canvas and select the "),s("code",[e._v("AdaptiveComponent")]),e._v(" type.")]),e._v(" "),s("li",[e._v("Input the appropriate "),s("code",[e._v("family")]),e._v(" and "),s("code",[e._v("type")]),e._v(" (in our case, they are both the same: "),s("code",[e._v("4Pt-AdaptivePanel")]),e._v(")")]),e._v(" "),s("li",[e._v("Connect the grouped points to the "),s("code",[e._v("basePoints")]),e._v(" input. The component would generate an "),s("code",[e._v("AdaptiveComponent")]),e._v(" object for every group of points.")]),e._v(" "),s("li",[e._v("Create a new stream on the server to hold this adaptive panels and create a "),s("code",[e._v("Send")]),e._v(" node pointing to that stream.")]),e._v(" "),s("li",[e._v("Send the "),s("code",[e._v("AdaptiveComponents")]),e._v(" you just created.")])]),e._v(" "),s("p",[s("img",{attrs:{src:a(507),alt:""}})]),e._v(" "),s("p",[e._v("In Revit, add the stream you just created using the Desktop UI and receive the data. Your panels should appear on the top floor of the building.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(508),alt:""}})]),e._v(" "),s("h3",{attrs:{id:"using-branches-to-swap-design-alternatives"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-branches-to-swap-design-alternatives"}},[e._v("#")]),e._v(" Using branches to swap design alternatives")]),e._v(" "),s("p",[e._v("This is a perfect moment to introduce the behaviour of "),s("code",[e._v("branches")]),e._v(" in the Speckle Revit connector; and how you can leverage the feature to alternate between different design options.")]),e._v(" "),s("ol",[s("li",[e._v("Go to the stream's url in your web browser, and create a new branch called "),s("code",[e._v("design-option-2")]),e._v(".")]),e._v(" "),s("li",[e._v("Copy the url of the "),s("code",[e._v("branch")]),e._v(" page (it should end in "),s("code",[e._v("/branches/BRANCH_NAME")]),e._v(")")]),e._v(" "),s("li",[e._v("On the grasshopper file, modify the points in any way, like modifying the "),s("code",[e._v("seed")]),e._v(" input in the "),s("code",[e._v("Random numbers")]),e._v(" node.")]),e._v(" "),s("li",[e._v("Change the "),s("code",[e._v("stream url")]),e._v(" for the "),s("code",[e._v("branch url")]),e._v(" we just copied and press send.")])]),e._v(" "),s("p",[e._v("In Revit, you'll notice there's an update notification in the "),s("em",[e._v("Roof Panels")]),e._v(" stream that specifies there have been changes in a "),s("strong",[e._v("different branch")]),e._v(". You need to switch branches to receive the new data.")]),e._v(" "),s("ol",[s("li",[e._v("Click on the branch name on the Stream card.")]),e._v(" "),s("li",[e._v("Select the branch we just created.")]),e._v(" "),s("li",[e._v("Click the "),s("code",[e._v("Receive")]),e._v(" button.")])]),e._v(" "),s("p",[e._v("You should see the new panels update to reflect the new design option. To go back to the previous version, you can always go back to the "),s("code",[e._v("main")]),e._v(" branch.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(509),alt:""}})]),e._v(" "),s("h2",{attrs:{id:"using-speckle-in-the-family-editor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-speckle-in-the-family-editor"}},[e._v("#")]),e._v(" Using Speckle in the Family Editor")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("üöß This section is still under construction üöß")])]),e._v(" "),s("h3",{attrs:{id:"populating-family-instances-in-the-model"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#populating-family-instances-in-the-model"}},[e._v("#")]),e._v(" Populating family instances in the model")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("üöß This section is still under construction üöß")])]),e._v(" "),s("h2",{attrs:{id:"known-issues"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#known-issues"}},[e._v("#")]),e._v(" Known issues")]),e._v(" "),s("p",[e._v("Speckle 2.0 is currently under "),s("code",[e._v("beta")]),e._v(". You can find any known issues on our "),s("a",{attrs:{href:"https://github.com/specklesystems/speckle-sharp/issues?q=is%3Aissue+is%3Aopen",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub Repo Issues page"),s("OutboundLink")],1),e._v(".")])])}),[],!1,null,null,null);t.default=o.exports}}]);